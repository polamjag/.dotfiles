# ============= #
# common config #
# ============= #
# workaround
test -f $HOME/.zshenv && source $HOME/.zshenv

# load $PATH
test -d $HOME/bin && PATH=$HOME/bin:$PATH
export PATH

case ${OSTYPE} in
  darwin*)
    test -x /usr/libexec/path_helper && eval $(/usr/libexec/path_helper -s)
    if [ -d '/usr/local/opt/coreutils/libexec/gnubin' ] ; then
      source $HOME/.zsh.d/gnu.zsh
    else
      source $HOME/.zsh.d/bsd.zsh
    fi
    ;;
  freebsd*)
    source $HOME/.zsh.d/bsd.zsh
    ;;
  linux*)
    source $HOME/.zsh.d/linux.zsh
    source $HOME/.zsh.d/gnu.zsh
    ;;
esac

bindkey -e
[[ $TERM == "dumb" ]] || tabs -2 # tab width in shell

autoload colors ; colors


# ========== #
# completion #
# ========== #
autoload -U compinit ; compinit
setopt list_packed      # display completion compactly
setopt listpacked
unsetopt auto_remove_slash
setopt auto_param_slash   # append '/' at tail of directory
setopt mark_dirs
setopt list_types      # display type of files in completion list
unsetopt menu_complete
setopt auto_list       # display with list of all completion with ^I
setopt auto_menu       # complete automatically with key press
setopt auto_param_keys    # complete parens automatically
setopt auto_resume      # resume suspended command automatically

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # case-insensitive
zstyle ':completion:*' use-cache true    # cache completion
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:default' menu select=1 # select completion with arrow keys
zstyle ':completion:*:messages' format '%F{green}%d'
zstyle ':completion:*:warnings' format '%F{magenta}No matches for:''%F{YELLOW} %d'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:descriptions' format '%F{yellow}%B%d: %b%f'
zstyle ':completion:*:processes' command 'ps x'
zstyle ':completion:*' group-name ''
if [ "$LS_COLORS" = '' ] ; then
  zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} ; fi
# enable coloring for completion of kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'
# completion overrides
compdef mosh=ssh


# ======= #
# history #
# ======= #
HISTFILE=$HOME/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt extended_history
setopt append_history
setopt inc_append_history
setopt share_history
setopt hist_ignore_dups # ignore same command as above
unsetopt hist_verify
setopt hist_reduce_blanks
setopt hist_no_store
setopt hist_expand # expand history in completion
setopt histignorespace
history-all() { history -E 1 }
# enable completion from history
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end


# ====== #
# prompt #
# ====== #
autoload -U promptinit ; promptinit
autoload -U add-zsh-hook
setopt correct
# main prompt
if [ "$SSH_CONNECTION" = "" ] ; then
# non-ssh
PROMPT="
%F{green}%B%~%b%f %B(%F{cyan}%n%f)%(1j.%F{magenta} *%j bg*%f.)%(?..%F{red} [%?])
%#%b%f "
else
# on ssh
PROMPT="
%F{magenta}%B-=> %b%f%F{green}%B%~%b%f %B(%F{yellow}%M%f::%F{cyan}%n%f)%(1j.%F{magenta} *%j bg*%f.)%(?..%F{red} [%?])
%#%b%f "
fi
zle_highlight=(isearch:standout)
SPROMPT='%BCorrect: %F{yellow}%R%f -> %F{cyan}%U%r%u%f [nyae]?%b '
# config for right prompt for VCS
autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '%c%u (%s:%b)'
zstyle ':vcs_info:*' actionformats '%c%u (%s:%b|%a)'
zstyle ':vcs_info:*' check-for-update true
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' stagedstr "+"
zstyle ':vcs_info:*' unstagedstr "-"
precmd_githook () {
  psvar=()
  LANG=en_US.UTF-8 vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
} ; add-zsh-hook precmd precmd_githook
RPROMPT="%F{yellow}%B%1(v|%1v|)%b%f"


# =============================== #
# settings for moving directories #
# =============================== #
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_to_home
setopt pushd_silent
alias pd='popd'
alias gd='dirs -v; echo -n "select number: ";
read newdir; cd +"$newdir" '


# ==== #
# misc #
# ==== #
setopt no_beep
setopt nolistbeep
setopt complete_in_word
setopt extended_glob
setopt brace_ccl
setopt equals
setopt numeric_glob_sort
setopt path_dirs
setopt print_eight_bit
setopt auto_name_dirs
unsetopt flow_control
setopt no_flow_control
setopt hash_cmds
setopt bsd_echo
setopt no_hup
setopt notify
setopt long_list_jobs
setopt magic_equal_subst
setopt multios
setopt short_loops
setopt always_last_prompt
setopt cdable_vars sh_word_split
setopt rm_star_wait
unsetopt no_clobber
setopt no_unset # don't allow using of undefined variables
setopt interactive_comments
# configure behaviour of less (ref. man less)
#LESS=-MF
#export LESS
if type /usr/bin/lesspipe &>/dev/null ; then
  LESSOPEN="| /usr/bin/lesspipe '%s'"
  LESSCLOSE="/usr/bin/lesspipe '%s' '%s'"
  export LESSOPEN LESSCLOSE
fi
umask 022
# fix corruption in Glib application
export G_FILENAME_ENCODING=@locale
export WORDCHARS="*?_-.[]~&;!#$%^(){}<>"
export EDITOR='vi'


# ================== #
# command line stack #
# ================== #
show_buffer_stack() {
  POSTDISPLAY="
++> $LBUFFER"
  zle push-line
}
zle -N show_buffer_stack
bindkey "^[q" show_buffer_stack


# ==================================== #
# aliases, keybinds and hooked actions #
# ==================================== #
if [ -d "$HOME/.zsh.d/" ] ; then
  for f in $HOME/.zsh.d/alias/* ; do
    source $f
  done
fi
# configs for well-used keys
bindkey "^[[3~" delete-char
bindkey "^[[1~" beginning-of-line
bindkey "^[[4~" end-of-line
bindkey -r '^X'
kill-backward-blank-word() {
  zle set-mark-command
  zle vi-backward-blank-word
  zle kill-region
}
zle -N kill-backward-blank-word
bindkey '^Q' kill-backward-blank-word
# C-l to clear terminal and rehash
clear-screen-rehash() {
  zle clear-screen
  rehash
  zle reset-prompt
} ; zle -N clear-screen-rehash
bindkey '^L' clear-screen-rehash


# =================== #
# workaround for tmux #
# =================== #
SOCK="/tmp/ssh-agent-$USER"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
then
  rm -f $SOCK
  ln -sf $SSH_AUTH_SOCK $SOCK
  export SSH_AUTH_SOCK=$SOCK
fi


# ================= #
# peco integrations #
# ================= #
# history filtering with peco
if hash peco &>/dev/null ; then
peco-select-history() {
  local tac
  if hash tac &>/dev/null; then
    tac="tac"
  else
    tac="tail -r"
  fi
  if [ "$LBUFFER" = "" ] ; then
    BUFFER=$(history -n 1 | \
     eval $tac | \
     peco --prompt='HIST>' | \
     sed -e "s/^[0-9\/]\{8,10\}[ ]*[0-9\:]\{5\}[ ]*//g"
    )
  else
    BUFFER=$(history -n 1 | \
     eval $tac | \
     peco --query "$LBUFFER" --prompt='HIST>' | \
     sed -e "s/^[0-9\/]\{8,10\}[ ]*[0-9\:]\{5\}[ ]*//g"
    )
  fi
  CURSOR=$#BUFFER
}
zle -N peco-select-history
bindkey '^r' peco-select-history
# directory stack filtering
fi


if [ -d "$HOME/.zsh.d/misc" ] ; then
  source "$HOME/.zsh.d/misc/"*
fi
