"" init
if filereadable("/etc/vimrc")
  source /etc/vimrc
endif
if filereadable("/etc/vim/vimrc")
  source /etc/vim/vimrc
endif

set nocompatible
filetype off

let $CACHE = expand('~/.cache')
if !($CACHE->isdirectory())
  call mkdir($CACHE, 'p')
endif
if &runtimepath !~# '/dein.vim'
  let s:dir = 'dein.vim'->fnamemodify(':p')
  if !(s:dir->isdirectory())
    let s:dir = $CACHE .. '/dein/repos/github.com/Shougo/dein.vim'
    if !(s:dir->isdirectory())
      execute '!git clone https://github.com/Shougo/dein.vim' s:dir
    endif
  endif
  execute 'set runtimepath^='
        \ .. s:dir->fnamemodify(':p')->substitute('[/\\]$', '', '')
endif

" Ward off unexpected things that your distro might have made, as
" well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Set dein base path (required)
let s:dein_base = '~/.cache/dein/'

" Set dein source path (required)
let s:dein_src = '~/.cache/dein/repos/github.com/Shougo/dein.vim'

" Set dein runtime path (required)
execute 'set runtimepath+=' .. s:dein_src

" Call dein initialization (required)
call dein#begin(s:dein_base)

call dein#add(s:dein_src)

" Your plugins go here:
call dein#add('itchyny/lightline.vim')
call dein#add('itchyny/landscape.vim')
call dein#add('haya14busa/incsearch.vim')

" Finish dein initialization (required)
call dein#end()

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on

" Enable syntax highlighting
if has('syntax')
  syntax on
endif

" Uncomment if you want to install not-installed plugins on startup.
if dein#check_install()
 call dein#install()
endif


set t_Co=256

filetype plugin indent on

set wildignorecase


"" general
set expandtab
set tabstop=2
set softtabstop=0
set shiftwidth=2
set smarttab

set number
set title
set visualbell
set scrolloff=5

if v:version >= 730
  set undofile    "create <FILENAME>.un~
  set colorcolumn=85
endif

set autochdir

set ignorecase
set smartcase
set gdefault    " always %s/hoge/foo/ means %s/hoge/foo/g
set incsearch
set showmatch
set hlsearch
set wrapscan

set wrap

set mouse=a

set formatoptions=qrn1

set encoding=utf-8
set fileformats=unix,dos,mac

" Folding rules {{{
set foldenable                  " enable folding
set foldcolumn=2                " add a fold column
set foldmethod=marker           " detect triple-{ style fold markers
set foldlevelstart=0            " start out with everything folded
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
" }}}

set clipboard+=autoselect

set backspace=indent,eol,start
set formatoptions+=mM
set autoindent
set smartindent

set wildmenu
set wildmode=full:list

set showmatch
set foldmethod=syntax
set grepprg=internal

set autowrite
set hidden
set history=10000
set updatetime=500

syntax on

autocmd BufWritePre * :%s/\s\+$//ge " eliminate space at EOL

" colorscheme and status bar
colorscheme landscape
set cmdheight=1
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ }
set laststatus=2


"" general keybindings
inoremap <C-c> <Esc>
noremap ; :
noremap : ;
inoremap <C-e> <END>
inoremap <C-a> <HOME>
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-f> <Left>
inoremap <C-b> <Right>
inoremap <C-d> <Delete>
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap <Space> <PageDown>
nnoremap <S-SPACE> <PageUp>

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

imap <F7> <nop>
set pastetoggle=<F7>

imap <F4> <nop>
