"" init
if filereadable("/etc/vimrc")
  source /etc/vimrc
endif
if filereadable("/etc/vim/vimrc")
  source /etc/vim/vimrc
endif

set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#begin(expand('~/.vim/bundle/'))
  NeoBundleFetch 'Shougo/neobundle.vim'
  call neobundle#end()
endif


"" packages
NeoBundle 'unite.vim'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'h1mesuke/unite-outline'
NeoBundle 'tsukkee/unite-tag'

NeoBundle 'itchyny/lightline.vim'
NeoBundle 'itchyny/landscape.vim'

NeoBundle 'The-NERD-tree'
NeoBundle 'The-NERD-Commenter'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'haya14busa/incsearch.vim'
NeoBundle 'taglist.vim'
NeoBundle 'surround.vim'
NeoBundle 'ref.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Shougo/vimproc'
NeoBundle 'Gist.vim'
NeoBundle 'Rainbow-Parenthesis'
NeoBundle 'Modeliner'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'sudo.vim'
NeoBundle 'smartchr'
NeoBundle 'tsaleh/vim-align'

NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'ruby-matchit'
NeoBundle 'slim-template/vim-slim'

filetype plugin indent on

set wildignorecase


"" general
set expandtab
set tabstop=2
set softtabstop=0
set shiftwidth=2
set smarttab

set number
set title
set visualbell
set scrolloff=5

if v:version >= 700
  set cursorline
endif

if v:version >= 730
  set undofile    "create <FILENAME>.un~
  set colorcolumn=85
  set relativenumber
endif

set ignorecase
set smartcase
set gdefault    " always %s/hoge/foo/ means %s/hoge/foo/g
set incsearch
set showmatch
set hlsearch
set wrapscan

set wrap

set mouse=a

set formatoptions=qrn1

set encoding=utf-8
set fileformats=unix,dos,mac

" Folding rules {{{
set foldenable                  " enable folding
set foldcolumn=2                " add a fold column
set foldmethod=marker           " detect triple-{ style fold markers
set foldlevelstart=0            " start out with everything folded
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
" }}}

set clipboard+=autoselect

set backspace=indent,eol,start
set formatoptions+=mM
set autoindent
set smartindent

set wildmenu
set wildmode=full:list

set showmatch
set foldmethod=syntax
set grepprg=internal

set autowrite
set hidden
set history=10000
set updatetime=500

syntax on

autocmd BufWritePre * :%s/\s\+$//ge " eliminate space at EOL

" colorscheme and status bar
colorscheme landscape
set cmdheight=1
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }
set laststatus=2


"" neocomplcache
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()


"" quickrun
" Initialization
let g:quickrun_config = {}


"" NERDCommenter
let NERDSpaceDelims = 1
let NERDShutUp = 1


"" unite.vim
"Key Map
"fc: list around about current dir
"fb: list around buffer dir
"fr: list register
"fo: list outline
"ff: list unite source
"fl: list colorscheme and selection
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    f [unite]

nnoremap <silent> [unite]c  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]r  :<C-u>Unite -buffer-name=register register<CR>
nnoremap  [unite]f  :<C-u>Unite source<CR>
" @see https://github.com/h1mesuke/unite-outline
nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
" @see https://github.com/ujihisa/unite-colorscheme
nnoremap [unite]l :<C-u>Unite -auto-preview colorscheme<CR>
" @see https://github.com/tsukkee/unite-tag
" searching tag by words on cursor.
nnoremap <silent> [unite]u  :<C-u>Unite -immediately -no-start-insert tag:<C-r>=expand('<cword>')<CR><CR>
" show tags
nnoremap <silent> [unite]t  :<C-u>Unite tag<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
  " Overwrite settings.

  nmap <buffer> <ESC>      <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " Start insert.
  " let g:unite_enable_start_insert = 0
endfunction

let g:unite_source_file_mru_limit = 200
let g:unite_enable_split_vertically = 0 "vertical split


"" ctags
set tags=tags
let g:tlist_javascript_settings='javascript;f:function;c:class;m:method'


"" general keybindings
inoremap <C-c> <Esc>
noremap ; :
noremap : ;
inoremap <C-e> <END>
inoremap <C-a> <HOME>
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
inoremap <C-f> <Left>
inoremap <C-b> <Right>
inoremap <C-d> <Delete>
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap <Space> <PageDown>
nnoremap <S-SPACE> <PageUp>

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

imap <F7> <nop>
set pastetoggle=<F7>
